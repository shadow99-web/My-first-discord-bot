const { SlashCommandBuilder, AttachmentBuilder, PermissionFlagsBits } = require("discord.js");
const discordTranscripts = require("discord-html-transcripts");
const fs = require("fs-extra");
const axios = require("axios");
const FormData = require("form-data");

module.exports = {
  name: "transcriptchat",
  description: "Generates a chat transcript (HTML format) for the channel.",
  usage: "transcriptchat [#channel] [withImages|noImages]",

  data: new SlashCommandBuilder()
    .setName("transcriptchat")
    .setDescription("Generate an HTML transcript of this or another channel.")
    .addChannelOption(option =>
      option.setName("channel")
        .setDescription("The channel to generate transcript from")
        .setRequired(false)
    )
    .addStringOption(option =>
      option.setName("images")
        .setDescription("Include images in transcript? (yes/no)")
        .setRequired(false)
        .addChoices(
          { name: "Yes (Include Images)", value: "yes" },
          { name: "No (Faster, No Images)", value: "no" }
        )
    ),

  async execute(interactionOrMessage, client) {
    const isSlash = !!interactionOrMessage.isChatInputCommand;
    const interaction = isSlash ? interactionOrMessage : null;
    const message = isSlash ? null : interactionOrMessage;

    try {
      const user = isSlash ? interaction.user : message.author;
      const channel = isSlash
        ? interaction.options?.getChannel("channel") || interaction.channel
        : message.mentions.channels.first() || message.channel;

      const includeImages = isSlash
        ? interaction.options?.getString("images") || "yes"
        : (message.content.includes("noImages") ? "no" : "yes");

      const withImages = includeImages === "yes";

      if (!channel.isTextBased()) {
        const msg = "‚ùå That channel isn‚Äôt text-based!";
        return isSlash ? interaction.reply({ content: msg, ephemeral: true }) : message.reply(msg);
      }

      const progressMsg = isSlash
        ? await interaction.reply({ content: "üïì Creating transcript... [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%", fetchReply: true })
        : await message.reply("üïì Creating transcript... [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%");

      const fileName = `${channel.name.replace(/[^a-zA-Z0-9]/g, "_")}_transcript.html`;
      const filePath = `./transcripts/${fileName}`;
      await fs.ensureDir("./transcripts");

      let progress = 0;
      const updateProgress = async (percent) => {
        progress = percent;
        const barLength = 10;
        const filled = Math.round((percent / 100) * barLength);
        const bar = "‚ñà".repeat(filled) + "‚ñë".repeat(barLength - filled);
        if (isSlash) {
          await interaction.editReply(`üïì Creating transcript... [${bar}] ${percent}%`);
        } else {
          await progressMsg.edit(`üïì Creating transcript... [${bar}] ${percent}%`);
        }
      };

      await updateProgress(10);

      // üìÑ Generate transcript
      const transcript = await discordTranscripts.createTranscript(channel, {
        limit: -1,
        returnType: "buffer",
        fileName,
        saveImages: withImages,
        footerText: `Generated by ${user.tag} on ${new Date().toLocaleString()}`,
        poweredBy: false,
      });

      await updateProgress(60);

      // Save locally
      await fs.writeFile(filePath, transcript);
      await updateProgress(80);

      // üåê Upload to bashupload.com
      const form = new FormData();
      form.append("file", fs.createReadStream(filePath));
      const upload = await axios.post("https://bashupload.com/", form, {
        headers: form.getHeaders(),
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
      });

      const downloadLink = upload.data.match(/https?:\/\/bashupload\.com\/[^\s]+/g)?.[0] || null;
      await updateProgress(100);

      if (downloadLink) {
        const successMsg = `‚úÖ Transcript created successfully!\nüìÅ [Click to download transcript](${downloadLink})`;
        isSlash
          ? await interaction.editReply(successMsg)
          : await progressMsg.edit(successMsg);
      } else {
        const attachment = new AttachmentBuilder(filePath, { name: fileName });
        const successMsg = "‚úÖ Transcript created successfully (local file attached):";
        isSlash
          ? await interaction.editReply({ content: successMsg, files: [attachment] })
          : await progressMsg.edit({ content: successMsg, files: [attachment] });
      }

      // üßπ Clean up
      setTimeout(() => {
        fs.unlink(filePath).catch(() => {});
      }, 60000);

    } catch (error) {
      console.error("TranscriptChat Error:", error);
      const msg = "‚ùå Failed to create transcript. Please try again later.";
      if (interactionOrMessage.reply) {
        try {
          await interactionOrMessage.reply(msg);
        } catch {
          await interactionOrMessage.followUp(msg);
        }
      }
    }
  },
};
